const mongoose=require("../config/config.database"),{Node,Marker}=require("../models/entity.model"),authorize=require("../middlewares/oauth/authentication")["authorize"],{STATUS_200,STATUS_400,STATUS_500,STATUS_404}=require("../utils/constants"),postNode=async(e,a)=>{var{nodeId:e,panoData:t,panorama:r,position:o,thumbnail:s,name:n,links:d}=e.body;const i=new Node({nodeId:e,panoData:t,panorama:r,position:o,thumbnail:s,name:n,links:d});try{await Node.findOne({nodeId:e})||await i.save()}catch(e){return e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400,errors:e.errors}):a.status(500).json({message:STATUS_500})}return a.status(200).json({message:STATUS_200})},getNodes=(module.exports.postNode=[authorize(),postNode],async(e,a)=>{var t=parseInt(e.query.limit,10)||10,e=parseInt(e.query.page,10)||1;let r;try{if(!(r=await Node.paginate({},{projection:{createdAt:0,updatedAt:0,__v:0},limit:t,page:e})))return a.status(404).json({message:STATUS_404})}catch(e){return e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400,errors:e.errors}):a.status(500).json({message:STATUS_500})}return a.status(200).json({message:r})}),getNodeById=(module.exports.getNodes=[authorize(),getNodes],async(e,a)=>{e=e.params.nodeId;try{var t=await Node.findOne({nodeId:e});return t?a.status(200).json({message:t}):a.status(404).json({message:STATUS_404})}catch(e){return e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400}):a.status(500).json({message:STATUS_500})}}),deleteNodeById=(module.exports.getNodeById=[authorize(),getNodeById],async(e,a)=>{e=e.params.nodeId;try{await Node.findOne({markerId:e})}catch(e){return e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400}):a.status(500).json({message:STATUS_500})}}),markerAssociate=(module.exports.deleteNodeById=[authorize(),deleteNodeById],async(e,a)=>{var{nodeId:e,id:t,longitude:r,latitude:o,image:s,width:n,height:d,anchor:i,tooltip:u,content:m,data:g}=e.body,c={"markers.id":t,nodeId:e};try{const T=new Marker({id:t,longitude:r,latitude:o,image:s,width:n,height:d,anchor:i,tooltip:u,content:m,data:g});var l=await Node.findOne(c),S=await Marker.findOne({id:t});l||S?(await Marker.updateOne({id:t},{id:t,longitude:r,latitude:o,image:s,width:n,height:d,anchor:i,tooltip:u,content:m,data:g}).orFail(),await Node.updateOne({"markers.id":t},{$set:{"markers.$.longitude":r,"markers.$.latitude":o,"markers.$.image":s,"markers.$.width":n,"markers.$.height":d,"markers.$.anchor":i,"markers.$.tooltip":u,"markers.$.content":m,"markers.$.data":g}}).catch(e=>a.status(500).json({message:STATUS_500+e}))):(await Node.updateOne({nodeId:e},{$push:{markers:T}}).orFail(),await T.save())}catch(e){return e instanceof mongoose.Error.DocumentNotFoundError?a.status(404).json({message:STATUS_404+" ERROR: "+e}):e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400,errors:e.errors}):a.status(500).json({message:STATUS_500+e})}return a.status(200).json({message:STATUS_200})}),deleteMarkerById=(module.exports.markerAssociate=[authorize(),markerAssociate],async(e,a)=>{var{nodeId:e,id:t}=e.params,e={"markers.id":t,nodeId:e};try{return await Node.updateOne(e,{$pull:{markers:{id:t}}},{safe:!0,multi:!0}).orFail(),await Marker.deleteOne({id:t}).orFail(),a.status(200).json({message:STATUS_200})}catch(e){return e instanceof mongoose.Error.DocumentNotFoundError?a.status(404).json({message:STATUS_404}):e instanceof mongoose.Error.ValidationError?a.status(400).json({message:STATUS_400,errors:e.errors}):a.status(500).json({message:STATUS_500+e})}});module.exports.deleteMarkerById=[authorize(),deleteMarkerById];